generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === UNIFIED TRADING CARD MODEL ===
// Incorporates: Current schema + Fanatics + TCGPlayer + Phase1 approaches
model Card {
  id             String   @id @default(cuid())
  name           String
  set            String
  number         String
  variant        String?
  grade          String?
  condition      String?
  language       String   @default("English")
  
  // Enhanced normalization (from Phase1 + TCGPlayer)
  normalizedName String?
  cleanedName    String?  // TCGPlayer approach
  setCode        String?
  rarity         String?
  rarityWeight   Int?     // TCGPlayer: For sorting (higher = rarer)
  variantKey     String?
  cardKey        String?  // Phase1: Normalized grouping key
  cardType       String?  // TCGPlayer: Pokemon, Trainer, Energy
  cardNumber     String?  // Alternative to number for flexibility
  category       String   @default("Pokemon")
  
  // Metadata
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations - Unified from all schemas
  listings         Listing[]
  compSales        CompSale[]
  priceHistory     PriceSnapshot[]
  marketData       MarketData?
  evaluations      Evaluation[]
  watchlistItems   WatchlistItem[]
  qualityReports   DataQuality[]
  catalogItems     SourceCatalogItem[]  // Phase1: Multi-source catalog
  priceCache       PriceCache[]         // Phase1: Price snapshots
  modelInsights    ModelInsight[]       // Phase1: AI insights

  @@unique([set, number, variant, grade])
  @@index([normalizedName, setCode])
  @@index([variantKey])
  @@index([cardKey])           // Phase1 addition
  @@index([cleanedName])       // TCGPlayer addition
  @@index([rarity, rarityWeight]) // TCGPlayer sorting
}

// === ENHANCED MARKETPLACE LISTING MODEL ===
// Incorporates: Current + Fanatics + TCGPlayer marketplace features
model Listing {
  id              String   @id @default(cuid())
  cardId          String
  source          String
  price           Float
  currency        String   @default("USD")
  url             String
  seller          String?
  isActive        Boolean  @default(true)
  scrapedAt       DateTime @default(now())
  normalizedPrice Float?
  condition       String?
  grade           String?
  marketplace     String?
  
  // Enhanced from Fanatics/TCGPlayer
  externalId     String?  // TCGPlayer: Original listing ID
  marketPrice    Float?   // TCGPlayer: Market price reference
  lowPrice       Float?   // TCGPlayer: Low price for comparison
  midPrice       Float?   // TCGPlayer: Mid price for comparison
  highPrice      Float?   // TCGPlayer: High price for comparison
  directLowPrice Float?   // TCGPlayer: Direct low price
  shippingPrice  Float?   // Fanatics: Shipping costs
  totalPrice     Float?   // Fanatics: Including shipping
  listingType    String?  // Fanatics: "auction", "buy_it_now", etc.
  endTime        DateTime? // Fanatics: For auctions
  bidCount       Int?     // Fanatics: Number of bids
  watchers       Int?     // Fanatics: Number watching
  stock          Int      @default(1) // TCGPlayer: Available quantity
  imageUrl       String?  // Common: Listing image
  description    String?  // Common: Listing description

  // Relations
  card           Card          @relation(fields: [cardId], references: [id])
  evaluations    Evaluation[]
  qualityReports DataQuality[]
  purchases      Purchase[] // FIXED: Added missing reverse relation

  @@index([source])
  @@index([normalizedPrice])
  @@index([condition])
  @@index([externalId, source])  // TCGPlayer addition
  @@index([listingType, endTime]) // Fanatics auction indexing
}

// === USER SYSTEM ===
model User {
  id           String   @id @default(cuid())
  telegramId   String   @unique
  username     String?
  firstName    String?
  lastName     String?
  referralCode String   @unique
  referredBy   String?
  createdAt    DateTime @default(now())

  // Relations
  purchases      Purchase[]
  referralEvents ReferralEvent[]
  watchlistItems WatchlistItem[]
  referrer       User?           @relation("UserReferrals", fields: [referredBy], references: [referralCode])
  referrals      User[]          @relation("UserReferrals")
}

// === EVALUATION & ANALYTICS ===
model Evaluation {
  id               String   @id @default(cuid())
  cardId           String
  listingId        String
  fairValue        Float
  discount         Float
  investmentThesis String
  riskLevel        String
  projectedReturn  Float?
  confidence       Float
  createdAt        DateTime @default(now())

  // Relations
  card    Card    @relation(fields: [cardId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
}

model CompSale {
  id              String   @id @default(cuid())
  cardId          String
  salePrice       Float
  currency        String   @default("USD")
  normalizedPrice Float
  condition       String
  grade           String?
  saleDate        DateTime
  source          String
  marketplace     String
  seller          String?
  buyer           String?
  verified        Boolean  @default(false)
  outlier         Boolean  @default(false)
  weight          Float    @default(1.0)

  // Relations
  card Card @relation(fields: [cardId], references: [id])

  @@index([cardId, saleDate])
  @@index([normalizedPrice])
  @@index([condition])
  @@index([verified])
}

model MarketData {
  id            String   @id @default(cuid())
  cardId        String   @unique
  marketValue   Float?
  lowPrice      Float?
  highPrice     Float?
  avgPrice      Float?
  medianPrice   Float?
  volatility    Float?
  trend         String?
  trendStrength Float?
  liquidity     String?
  totalListings Int      @default(0)
  activeSales   Int      @default(0)
  avgTimeToSell Int?
  lastUpdated   DateTime @default(now())
  dataQuality   Float    @default(0)
  sourceCount   Int      @default(0)

  // Relations
  card Card @relation(fields: [cardId], references: [id])

  @@index([marketValue])
  @@index([trend])
  @@index([lastUpdated])
}

model PriceSnapshot {
  id           String   @id @default(cuid())
  cardId       String
  timestamp    DateTime @default(now())
  marketValue  Float?
  lowPrice     Float?
  highPrice    Float?
  avgPrice     Float?
  medianPrice  Float?
  listingCount Int      @default(0)
  saleCount    Int      @default(0)
  volatility   Float?
  trend        String?

  // Relations
  card Card @relation(fields: [cardId], references: [id])

  @@index([cardId, timestamp])
  @@index([marketValue])
}

// === COMMERCE & TRANSACTIONS ===
model Purchase {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  amount    Float
  fee       Float
  status    String
  txHash    String?
  createdAt DateTime @default(now())

  // Relations - FIXED: Added missing Listing relation
  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
}

model WatchlistItem {
  id        String   @id @default(cuid())
  userId    String
  cardId    String
  createdAt DateTime @default(now())

  // Relations
  card Card @relation(fields: [cardId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, cardId])
  @@index([userId])
  @@index([cardId])
}

model ReferralEvent {
  id        String   @id @default(cuid())
  userId    String
  code      String
  path      String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}

// === DATA INFRASTRUCTURE ===
model DataSource {
  id                String    @id @default(cuid())
  name              String    @unique
  url               String
  isActive          Boolean   @default(true)
  lastScrapedAt     DateTime?
  totalRecords      Int       @default(0)
  successRate       Float     @default(0.0)
  avgResponseTime   Int?
  lastErrorAt       DateTime?
  lastErrorMsg      String?
  consecutiveErrors Int       @default(0)
  rateLimit         Int       @default(1000)
  timeout           Int       @default(30)

  // Relations
  processingJobs ProcessingJob[]
  auditLogs      AuditLog[]

  @@index([isActive])
  @@index([lastScrapedAt])
  @@index([successRate])
}

model ProcessingJob {
  id               String    @id @default(cuid())
  sourceId         String
  jobType          String
  status           String
  priority         Int       @default(0)
  batchSize        Int?
  recordsProcessed Int       @default(0)
  recordsTotal     Int?
  startedAt        DateTime?
  completedAt      DateTime?
  attempts         Int       @default(0)
  maxAttempts      Int       @default(3)
  lastErrorAt      DateTime?
  errorMessage     String?
  inputData        Json?
  outputData       Json?

  // Relations
  source DataSource @relation(fields: [sourceId], references: [id])

  @@index([status, priority])
  @@index([jobType, status])
  @@index([startedAt])
  @@index([sourceId, status])
}

model DataQuality {
  id           String    @id @default(cuid())
  cardId       String?
  listingId    String?
  completeness Float
  accuracy     Float
  consistency  Float
  freshness    Float
  issues       Json?
  severity     String
  resolved     Boolean   @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?
  createdAt    DateTime  @default(now())

  // Relations
  card    Card?    @relation(fields: [cardId], references: [id])
  listing Listing? @relation(fields: [listingId], references: [id])

  @@index([severity, resolved])
  @@index([completeness])
  @@index([cardId])
  @@index([createdAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  sourceId   String?
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  changes    Json?
  userId     String?
  jobId      String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  // Relations
  source DataSource? @relation(fields: [sourceId], references: [id])

  @@index([entityType, entityId])
  @@index([action, timestamp])
  @@index([sourceId, timestamp])
  @@index([userId])
}

// === PHASE 1 INTEGRATION MODELS ===
// Source catalog for multi-source data mapping
model SourceCatalogItem {
  id              String   @id @default(cuid())
  cardId          String   // Links to canonical Card
  sourceType      String   // "tcgplayer", "fanatics", "ebay", etc.
  externalId      String   // Original ID in source system
  cardKey         String   // Normalized grouping key
  sourceName      String   // Name in source system
  sourceSet       String   // Set in source system  
  sourceNumber    String   // Number in source system
  confidence      Float    @default(0.0) // Matching confidence
  isVerified      Boolean  @default(false)
  notes           String?  // Manual verification notes
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  card            Card     @relation(fields: [cardId], references: [id])
  
  @@unique([sourceType, externalId])
  @@index([cardKey])
  @@index([sourceType, isVerified])
}

// Price snapshots for historical tracking
model PriceCache {
  id              String   @id @default(cuid())
  cardId          String
  sourceType      String
  priceType       String   // "market", "low", "mid", "high", "last_sale"
  price           Float
  currency        String   @default("USD")
  confidence      Float    @default(0.0)
  sampleSize      Int      @default(0)
  timestamp       DateTime @default(now())
  
  // Relations
  card            Card     @relation(fields: [cardId], references: [id])
  
  @@index([cardId, sourceType, priceType])
  @@index([timestamp])
}

// AI model insights and predictions
model ModelInsight {
  id              String   @id @default(cuid())
  cardId          String
  modelType       String   // "price_prediction", "trend_analysis", "market_sentiment"
  insight         Json     // Structured insight data
  confidence      Float    @default(0.0)
  validUntil      DateTime?
  createdAt       DateTime @default(now())
  
  // Relations
  card            Card     @relation(fields: [cardId], references: [id])
  
  @@index([cardId, modelType])
  @@index([modelType, confidence])
}

// === LEGACY COMPATIBILITY ===
model Comp {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
